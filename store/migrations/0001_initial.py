# Generated by Django 3.0.3 on 2021-01-31 03:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields
import store.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_updated', models.DateTimeField(auto_now=True)),
                ('Name', models.CharField(max_length=64, verbose_name='Brand Name')),
                ('Brand_image', imagekit.models.fields.ProcessedImageField(upload_to='brand/images')),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LastModified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Categorey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Image', imagekit.models.fields.ProcessedImageField(upload_to='Categorey/images')),
                ('Name', models.CharField(help_text='Example - Schools, Classwise, Office, Pen and Pencils', max_length=64, verbose_name='Categorey Group Name')),
                ('Created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Categorey Group',
                'verbose_name_plural': 'Categorey Groups',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Joined', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('Email', models.EmailField(blank=True, default=None, max_length=254, null=True, unique=True)),
                ('PhoneNumber', models.CharField(help_text='10 Digit Phonenumber', max_length=10)),
                ('Gender', models.CharField(blank=True, choices=[('male', 'MALE'), ('female', 'FEMALE')], default='male', max_length=6)),
                ('TotalPurchase', models.PositiveIntegerField(blank=True, default=0)),
                ('NumberOfOrders', models.PositiveSmallIntegerField(blank=True, default=0, editable=False)),
                ('ShoppedCategories', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=store.models.return_dict)),
                ('ShoppedSubCategories', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=store.models.return_dict)),
                ('ProfilePic', models.ImageField(blank=True, default='./static/store/images/avatar/avt.png', upload_to='profiles/profilepics')),
                ('Cart', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='Customer', to='store.Cart')),
            ],
        ),
        migrations.CreateModel(
            name='Fileshare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Text', models.TextField(blank=True, default='', null=True)),
                ('ImageFile', models.ImageField(blank=True, default=None, null=True, upload_to='fileshare')),
                ('File', models.FileField(blank=True, default=None, null=True, upload_to='fileshare/files')),
                ('URL', models.URLField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=64, unique=True)),
                ('Created', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Is_variant', models.BooleanField(blank=True, default=False, editable=False)),
                ('Is_normal_product', models.BooleanField(blank=True, default=True, editable=False)),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_updated', models.DateTimeField(auto_now=True)),
                ('Added_by', models.CharField(blank=True, default='Rohit admin', editable=False, max_length=64)),
                ('Name', models.CharField(max_length=512)),
                ('Description', models.TextField(default='No Description')),
                ('Thumb_path', models.CharField(blank=True, editable=False, max_length=364)),
                ('Main_image', models.ImageField(upload_to='products/main_images')),
                ('Highlights', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=164), default=store.models.return_array, size=None)),
                ('Meta_data', django.contrib.postgres.fields.jsonb.JSONField(default=store.models.return_dict)),
                ('Cost_to_customer', models.PositiveIntegerField(default='625', help_text='Price that customer will PAY!')),
                ('Cost_to_seller', models.PositiveIntegerField(default='625', help_text='Total Cost of product for seller')),
                ('Crossed_price', models.PositiveIntegerField(default='700', help_text='Price that will be crossed')),
                ('Local_offer', models.PositiveIntegerField(blank=True, default=0, help_text='Discount percentage (%)', validators=[django.core.validators.MaxValueValidator(90)])),
                ('Is_active', models.BooleanField(default=True)),
                ('Total_stock', models.PositiveIntegerField()),
                ('Rating', models.FloatField(default=0, editable=False, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('Nums_of_rating', models.PositiveIntegerField(blank=True, default=0, editable=False)),
                ('Total_sales', models.PositiveIntegerField(blank=True, default=0, editable=False)),
                ('Total_views', models.PositiveIntegerField(blank=True, default=0, editable=False)),
                ('Total_carts', models.PositiveIntegerField(blank=True, default=0, editable=False)),
                ('Sales_probablity', models.FloatField(blank=True, default=1, editable=False, validators=[django.core.validators.MaxValueValidator(1)])),
                ('Cart_probablity', models.FloatField(blank=True, default=1, editable=False, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('Brand', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='Brans_products', to='store.Brand')),
            ],
        ),
        migrations.CreateModel(
            name='Product_type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=200, verbose_name='Type')),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_updated', models.DateTimeField(auto_now=True)),
                ('Meta_data', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=150), default=store.models.return_array, size=None, verbose_name='Details')),
            ],
            options={
                'verbose_name': 'Product_type',
                'verbose_name_plural': 'Product_types',
            },
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Product Attribute ( विशेषता )',
                'verbose_name_plural': 'Product Attribute ( विशेषता )',
            },
        ),
        migrations.CreateModel(
            name='ProductWithVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Is_variant', models.BooleanField(blank=True, default=False, editable=False)),
                ('Is_normal_product', models.BooleanField(blank=True, default=False, editable=False)),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_updated', models.DateTimeField(auto_now=True)),
                ('Name', models.CharField(max_length=526)),
                ('Name_list', models.CharField(blank=True, editable=False, max_length=1024)),
                ('Description', models.TextField()),
                ('Main_image', models.ImageField(upload_to='varianceproduct/mainimages')),
                ('Thumb_path', models.CharField(blank=True, editable=False, max_length=364)),
                ('Highlights', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=164), default=store.models.return_array, size=None)),
                ('Meta_data', django.contrib.postgres.fields.jsonb.JSONField(default=store.models.return_dict)),
                ('Rating', models.FloatField(default=0, editable=False, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('Nums_of_rating', models.PositiveIntegerField(blank=True, default=0, editable=False)),
                ('Is_active', models.BooleanField(default=True, verbose_name='Product Status')),
                ('Brand', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='store.Brand')),
            ],
        ),
        migrations.CreateModel(
            name='Slider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=128)),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_updated', models.DateTimeField(auto_now=True)),
                ('Active', models.BooleanField(default=False, verbose_name='Show on Main Page')),
                ('SliderCount_pc', models.PositiveSmallIntegerField(blank=True, default=0, editable=False)),
                ('SliderCount_mob', models.PositiveSmallIntegerField(blank=True, default=0, editable=False)),
                ('On_delete', models.BooleanField(blank=True, default=False, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=64)),
                ('Created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TopBar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_updated', models.DateTimeField(auto_now=True)),
                ('Name', models.CharField(help_text='Example - Newyear Topbar, New Session Topbar', max_length=256, verbose_name='Topbar Name')),
                ('Active', models.BooleanField(default=False, verbose_name='Show on Main Page')),
            ],
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Is_variant', models.BooleanField(blank=True, default=True, editable=False)),
                ('Is_normal_product', models.BooleanField(blank=True, default=False, editable=False)),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_updated', models.DateTimeField(auto_now=True)),
                ('Name', models.CharField(max_length=256)),
                ('Highlights', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=164), blank=True, default=store.models.return_array, editable=False, size=None)),
                ('Main_image', models.ImageField(blank=True, upload_to='variants/images')),
                ('Thumb_path', models.CharField(blank=True, editable=False, max_length=364)),
                ('Cost_to_customer', models.PositiveIntegerField(help_text='Price that customer will PAY!')),
                ('Cost_to_seller', models.PositiveIntegerField(help_text='Total Cost of product for seller')),
                ('Crossed_price', models.PositiveIntegerField(help_text='Price that will be crossed')),
                ('Local_offer', models.PositiveIntegerField(blank=True, default=0, help_text='Discount percentage (%)', validators=[django.core.validators.MaxValueValidator(90)], verbose_name='Discount in ( % )')),
                ('Is_active', models.BooleanField(default=True, verbose_name='Product Status')),
                ('Total_stock', models.PositiveIntegerField()),
                ('Product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Variants', to='store.ProductWithVariant')),
            ],
        ),
        migrations.CreateModel(
            name='VariantImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Name', models.CharField(max_length=50)),
                ('Main_image', models.ImageField(upload_to='product/images/varinat')),
                ('Thumb_path', models.CharField(blank=True, editable=False, max_length=364)),
                ('Variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Images', to='store.Variant')),
            ],
        ),
        migrations.CreateModel(
            name='Topbar_images',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(help_text='Example - Markers, GK Books, Pencil Colors', max_length=48, verbose_name='Categorey Name')),
                ('Image', imagekit.models.fields.ProcessedImageField(upload_to='genimages')),
                ('Related_topbar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Images', to='store.TopBar')),
            ],
        ),
        migrations.CreateModel(
            name='SubCategorey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Image', imagekit.models.fields.ProcessedImageField(upload_to='SubCategorey/images')),
                ('Show_on_mainpage', models.BooleanField(default=False)),
                ('Name', models.CharField(max_length=64, verbose_name='Categorey Name')),
                ('Parent_categorey', models.ManyToManyField(related_name='Subcategorey', to='store.Categorey', verbose_name='In Categorey Group')),
            ],
            options={
                'verbose_name': 'Product Categorey',
                'verbose_name_plural': 'Product Categories',
            },
        ),
        migrations.CreateModel(
            name='Slide_pc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Image', models.ImageField(upload_to='slider/pc_images')),
                ('GotoLink', models.URLField(blank=True, default='', verbose_name='Linked URL/Page')),
                ('Product', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Slide_pc', to='store.Product')),
                ('Related_slider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Slide_pc', to='store.Slider')),
                ('Variant', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Slide_pc', to='store.Variant')),
            ],
        ),
        migrations.CreateModel(
            name='Slide_mob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Image', models.ImageField(upload_to='slider/mob_images')),
                ('GotoLink', models.URLField(blank=True, default='', verbose_name='Linked URL/Page')),
                ('Product', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Slide_mob', to='store.Product')),
                ('Related_slider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Slide_mob', to='store.Slider')),
                ('Variant', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Slide_mob', to='store.Variant')),
            ],
        ),
        migrations.CreateModel(
            name='ShippingAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Father', models.CharField(max_length=164, verbose_name='(C/O) Gaurdian Name')),
                ('OwnerName', models.CharField(max_length=256)),
                ('PhoneNumber', models.CharField(max_length=10)),
                ('AltPhoneNumber', models.CharField(max_length=10)),
                ('City', models.CharField(max_length=128, verbose_name='City/Town/Village')),
                ('Block', models.CharField(help_text='This is optional', max_length=128)),
                ('District', models.CharField(max_length=128)),
                ('PIN', models.CharField(max_length=6)),
                ('State', models.CharField(max_length=128)),
                ('LandMark', models.CharField(help_text='(Optional)', max_length=164)),
                ('AddressType', models.CharField(choices=[('HOME', 'HOME (All day delivery)'), ('WORK', 'Work/Office (From 10AM To 5PM)')], max_length=164)),
                ('Owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ShippingAddressOptions', to='store.Customer')),
            ],
        ),
        migrations.AddField(
            model_name='productwithvariant',
            name='Categorey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='All_products_with_variant', to='store.SubCategorey'),
        ),
        migrations.AddField(
            model_name='productwithvariant',
            name='Tags',
            field=models.ManyToManyField(related_name='All_products_with_variant', to='store.Tag'),
        ),
        migrations.AddField(
            model_name='productwithvariant',
            name='Type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='All_products_with_variant', to='store.Product_type'),
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Value', models.CharField(max_length=50)),
                ('Attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Attributevalue', to='store.ProductAttribute')),
                ('Variant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Attributevalue', to='store.Variant')),
            ],
        ),
        migrations.AddField(
            model_name='product_type',
            name='Product_type_attributes',
            field=models.ManyToManyField(related_name='Product_types', to='store.ProductAttribute'),
        ),
        migrations.CreateModel(
            name='Product_images',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=164)),
                ('Main_image', models.ImageField(help_text='This will be the high quality image', upload_to='products/images/highres')),
                ('Thumb_path', models.CharField(blank=True, editable=False, max_length=364)),
                ('Related_product', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='Its_images', to='store.Product')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='Categorey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='All_products', to='store.SubCategorey'),
        ),
        migrations.AddField(
            model_name='product',
            name='Tags',
            field=models.ManyToManyField(related_name='All_tags', to='store.Tag'),
        ),
        migrations.AddField(
            model_name='product',
            name='Type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='All_products', to='store.Product_type'),
        ),
        migrations.CreateModel(
            name='OrderVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Quantity', models.PositiveSmallIntegerField()),
                ('Added', models.DateTimeField(auto_now_add=True)),
                ('Variant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='In_orders', to='store.Variant')),
            ],
        ),
        migrations.CreateModel(
            name='OrderProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Quantity', models.PositiveSmallIntegerField()),
                ('Added', models.DateTimeField(auto_now_add=True)),
                ('Product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='In_orders', to='store.Product')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('OrderDate', models.DateTimeField(auto_now_add=True)),
                ('LastModified', models.DateTimeField(default=django.utils.timezone.now)),
                ('Status', models.CharField(choices=[('0', 'Pending'), ('1', 'Order Recived'), ('2', 'Declined By Seller'), ('3', 'Cancelation Requested'), ('4', 'Cancel Completed'), ('5', 'Packed & Bill Genrated'), ('6', 'Shipped Out'), ('7', 'On The Way'), ('8', 'Completed'), ('9', 'Declined By Buyer'), ('10', 'Return Requested'), ('11', 'Return Completed'), ('12', 'Disputed'), ('13', 'Verification Required')], default='0', max_length=64)),
                ('TotalPrice', models.PositiveIntegerField(editable=False)),
                ('SellerComments', models.TextField(default='No Comments From Seller!')),
                ('DaysForCompletion', models.PositiveSmallIntegerField(blank=True, default=None, editable=False, null=True)),
                ('FeedbackRating', models.PositiveSmallIntegerField(blank=True, default=None, editable=False, null=True)),
                ('FeedbackComment', models.TextField(blank=True, default=None, editable=False, max_length=600, null=True)),
                ('Categories', models.ManyToManyField(editable=False, related_name='In_orders', to='store.Categorey')),
                ('Customer', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Orders', to='store.Customer')),
                ('Method', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='Orders', to='store.PaymentMethod')),
                ('Products', models.ManyToManyField(editable=False, related_name='Orders', to='store.OrderProduct')),
                ('ShippingAddress', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='Orders', to='store.ShippingAddress')),
                ('SubCategories', models.ManyToManyField(editable=False, related_name='In_orders', to='store.SubCategorey')),
                ('Variants', models.ManyToManyField(editable=False, related_name='Orders', to='store.OrderVariant')),
            ],
        ),
        migrations.AddField(
            model_name='customer',
            name='CurrentShippingAddress',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Customer', to='store.ShippingAddress'),
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=128)),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_updated', models.DateTimeField(auto_now=True)),
                ('Description', models.TextField(max_length=256)),
                ('All_products', models.ManyToManyField(blank=True, related_name='In_collection', to='store.Product')),
                ('All_products_with_variants', models.ManyToManyField(blank=True, related_name='In_collection', to='store.ProductWithVariant')),
            ],
        ),
        migrations.CreateModel(
            name='CartVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Quantity', models.PositiveSmallIntegerField()),
                ('Added', models.DateTimeField(auto_now_add=True)),
                ('Variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='In_carts', to='store.Variant')),
            ],
        ),
        migrations.CreateModel(
            name='CartProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Quantity', models.PositiveSmallIntegerField()),
                ('Added', models.DateTimeField(auto_now_add=True)),
                ('Product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='In_carts', to='store.Product')),
            ],
        ),
        migrations.AddField(
            model_name='cart',
            name='Product',
            field=models.ManyToManyField(related_name='Carts', to='store.CartProduct'),
        ),
        migrations.AddField(
            model_name='cart',
            name='Variant',
            field=models.ManyToManyField(related_name='Carts', to='store.CartVariant'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Email', models.EmailField(blank=True, default=None, max_length=254, null=True, unique=True)),
                ('PhoneNumber', models.CharField(help_text='10 Digit Phonenumber', max_length=10)),
                ('Gender', models.CharField(blank=True, choices=[('male', 'MALE'), ('female', 'FEMALE')], default='male', max_length=6)),
                ('Customer', models.OneToOneField(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='User', to='store.Customer')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
